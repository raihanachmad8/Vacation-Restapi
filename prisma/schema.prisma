generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Member
}

model User {
  user_id    String   @id @default(uuid()) @db.Char(36)
  role       Role     @default(Member)
  fullname   String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  username   String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  salt       String   @db.VarChar(50)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  PersonalAccessToken PersonalAccessToken[]
  Article             Article[]
  File                File[]

  @@map("users")
}

model PersonalAccessToken {
  id                    Int      @id @default(autoincrement())
  access_token          String   @unique @db.VarChar(400)
  refresh_token         String   @unique @db.VarChar(255)
  user_id               String   @db.Char(36)
  expires_access_token  DateTime
  expires_refresh_token DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  User User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("refresh_tokens")
}

model Tag {
  tag_name   String   @id @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Article Article[]

  @@map("tags")
}

model Article {
  article_id String   @id @default(uuid()) @db.Char(36)
  title      String   @db.VarChar(255)
  content    String   @db.Text
  cover_id   String?  @db.Char(36)
  user_id    String   @db.Char(36)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User  User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  Tag   Tag[]
  Cover File? @relation(fields: [cover_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("articles")
}

enum FileVisibility {
  Public
  Private
}

model File {
  id         String         @id @default(uuid()) @db.Char(36)
  filename   String         @db.VarChar(255)
  visibility FileVisibility @default(Private)
  user_id    String         @db.Char(36)
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  User       User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  Article    Article[]

  @@map("files")
}
