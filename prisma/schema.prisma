generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  user_id    String   @id @default(uuid()) @db.Char(36)
  role       Role     @default(MEMBER)
  fullname   String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  username   String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  salt       String   @db.VarChar(50)
  profile    String?  @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  PersonalAccessToken     PersonalAccessToken[]
  Article                 Article[]
  File                    File[]
  ArticleBookmark         ArticleBookmark[]
  ArticleLike             ArticleLike[]
  ArticleComment          ArticleComment[]
  ArticleCommentLike      ArticleCommentLike[]
  ArticleCommentReply     ArticleCommentReply[]
  ArticleCommentReplyLike ArticleCommentReplyLike[]

  @@map("users")
}

model PersonalAccessToken {
  id                    Int      @id @default(autoincrement())
  access_token          String   @unique @db.VarChar(400)
  refresh_token         String   @unique @db.VarChar(255)
  user_id               String   @db.Char(36)
  expires_access_token  DateTime
  expires_refresh_token DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  User User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("refresh_tokens")
}

model Tag {
  tag_name   String   @id @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Article Article[] @relation("ArticleTag")

  @@map("tags")
}

model Article {
  article_id String   @id @default(uuid()) @db.Char(36)
  title      String   @db.VarChar(255)
  content    String   @db.Text
  cover_id   String?  @db.Char(36)
  user_id    String   @db.Char(36)
  status     Status   @default(PENDING)
  count_view Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User            User?             @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  Tag             Tag[]             @relation("ArticleTag")
  Cover           File?             @relation(fields: [cover_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  ArticleBookmark ArticleBookmark[]
  ArticleLike     ArticleLike[]
  ArticleComment  ArticleComment[]

  @@map("articles")
}

enum FileVisibility {
  PRIVATE
  PUBLIC
}

model File {
  id         String         @id @default(uuid()) @db.Char(36)
  filename   String         @db.VarChar(255)
  visibility FileVisibility @default(PRIVATE)
  user_id    String         @db.Char(36)
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  User       User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  Article    Article[]

  @@map("files")
}

enum Status {
  PENDING
  REVISION
  REJECT
  APPROVE
}

model ArticleBookmark {
  article_id String   @db.Char(36)
  user_id    String   @db.Char(36)
  created_at DateTime @default(now())

  User    User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  Article Article @relation(fields: [article_id], references: [article_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([article_id, user_id])
  @@map("article_bookmarks")
}

model ArticleLike {
  article_id String   @db.Char(36)
  user_id    String   @db.Char(36)
  created_at DateTime @default(now())

  User    User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  Article Article @relation(fields: [article_id], references: [article_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([article_id, user_id])
  @@map("article_likes")
}

model ArticleComment {
  comment_id String   @id @default(uuid()) @db.Char(36)
  article_id String   @db.Char(36)
  user_id    String   @db.Char(36)
  comment    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User                User                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  Article             Article               @relation(fields: [article_id], references: [article_id], onDelete: Cascade, onUpdate: NoAction)
  ArticleCommentReply ArticleCommentReply[]
  ArticleCommentLike  ArticleCommentLike[]

  @@map("article_comments")
}

model ArticleCommentLike {
  comment_id String   @db.Char(36)
  user_id    String   @db.Char(36)
  created_at DateTime @default(now())

  User           User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  ArticleComment ArticleComment @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([comment_id, user_id])
  @@map("article_comment_likes")
}

model ArticleCommentReply {
  reply_id   String   @id @default(uuid()) @db.Char(36)
  comment_id String   @db.Char(36)
  parent_id  String?  @db.Char(36)
  user_id    String   @db.Char(36)
  comment    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User                    User                      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  ArticleComment          ArticleComment            @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade, onUpdate: NoAction)
  ArticleCommentReplyLike ArticleCommentReplyLike[]

  ParentReply  ArticleCommentReply?  @relation("ReplyReplies", fields: [parent_id], references: [reply_id], onDelete: Cascade, onUpdate: NoAction)
  ChildReplies ArticleCommentReply[] @relation("ReplyReplies")

  @@map("article_comment_replies")
}

model ArticleCommentReplyLike {
  reply_id   String   @db.Char(36)
  user_id    String   @db.Char(36)
  created_at DateTime @default(now())

  User                User                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  ArticleCommentReply ArticleCommentReply @relation(fields: [reply_id], references: [reply_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([reply_id, user_id])
  @@map("article_comment_reply_likes")
}
